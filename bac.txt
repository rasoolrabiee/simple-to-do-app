import tkinter as tk
from tkinter import simpledialog

class TodoListApp(tk.Tk):
    def __init__(self):
        super().__init__()

        # Window settings
        self.title("To-Do List")
        self.geometry('600x400')  # Increase the size for better fit
        # self.overrideredirect(True)  # Remove window decorations
        self.attributes('-alpha', 0.9)  # Set transparency

        # Initialize dragging variables
        self.drag_start_x = 0
        self.drag_start_y = 0
        self.bind("<ButtonPress-1>", self.on_drag_start)
        self.bind("<B1-Motion>", self.on_drag_motion)

        # Define colors
        self.bg_color = "#F9D5B6"  # Light orange
        self.header_bg_color = "#F8B195"  # Slightly darker orange for header
        self.label_bg_color = "#F8E4D9"  # Even lighter orange for labels
        self.checked_row_color = "#32CD32"  # Yellow for checked rows

        # Define font size
        self.font_size = 10

        # Define label width
        self.label_width = 20

        # Create main frame
        self.main_frame = tk.Frame(self, bg=self.bg_color, width=200, height=200)
        self.main_frame.pack_propagate(False)  # Prevent resizing
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Frame for the add button
        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color, height=30)
        self.button_frame.pack(pady=0, fill=tk.X)

        # Add button
        self.add_button = tk.Button(self.button_frame, text="+", command=self.add_row, bg=self.header_bg_color, font=('Helvetica', self.font_size, 'bold'), width=2)
        self.add_button.pack(pady=5, side="top")

        # Create canvas for scrolling
        self.canvas = tk.Canvas(self.main_frame, bg=self.bg_color)
        self.scrollbar = tk.Scrollbar(self.main_frame, orient="vertical", command=self.canvas.yview)
        
        # Create a frame inside the canvas to hold the tasks
        self.task_frame = tk.Frame(self.canvas, bg=self.bg_color)

        # Add the frame to the canvas
        self.canvas.create_window((0, 0), window=self.task_frame, anchor="nw")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        self.canvas.config(yscrollcommand=self.scrollbar.set)

        # Bind mouse scroll to the canvas
        self.canvas.bind_all("<MouseWheel>", self.on_mouse_wheel)

        # Update the canvas scrollregion
        self.task_frame.bind("<Configure>", self.update_scrollregion)

        self.entries = []  # List to store the widgets for each row

    def add_row(self):
        # Prompt user for task, introduction, and time
        task = simpledialog.askstring("Input", "Enter the task:")
        if task is None: return

        intro = simpledialog.askstring("Input", "Enter the introduction:")
        if intro is None: return

        time = simpledialog.askstring("Input", "Enter the time:")
        if time is None: return

        row_number = len(self.entries) + 1

        # Create widgets for the new row
        check_var = tk.BooleanVar()  # Variable to store checkbox state
        check_button = tk.Checkbutton(self.task_frame, variable=check_var, bg=self.bg_color, command=lambda: self.update_row_color(check_var, row_number))
        task_label = tk.Label(self.task_frame, text=task, bg=self.label_bg_color, borderwidth=1, relief=tk.SOLID, padx=10, pady=5, font=('Helvetica', self.font_size), wraplength=50)
        intro_label = tk.Label(self.task_frame, text=intro, bg=self.label_bg_color, borderwidth=1, relief=tk.SOLID, padx=10, pady=5, font=('Helvetica', self.font_size), wraplength=200, width=5)
        time_label = tk.Label(self.task_frame, text=time, bg=self.label_bg_color, borderwidth=1, relief=tk.SOLID, padx=10, pady=5, font=('Helvetica', self.font_size), wraplength=200, width=5)

        # Create a button to delete the row
        delete_button = tk.Button(self.task_frame, text="-", command=lambda: self.delete_row(check_button), bg="#FF6F61", font=('Helvetica', self.font_size, 'bold'), width=2)

        # Grid the widgets
        check_button.grid(row=row_number, column=0, padx=5, pady=5, sticky="nsew")
        task_label.grid(row=row_number, column=1, padx=5, pady=5, sticky="nsew")
        intro_label.grid(row=row_number, column=2, padx=5, pady=5, sticky="nsew")
        time_label.grid(row=row_number, column=3, padx=5, pady=5, sticky="nsew")
        delete_button.grid(row=row_number, column=4, padx=5, pady=5)

        # Add the widgets to the list
        self.entries.append((check_button, task_label, intro_label, time_label, delete_button))

        # Adjust column and row weights to ensure proper resizing
        for col in range(5):
            self.task_frame.grid_columnconfigure(col, weight=1)
        self.task_frame.grid_rowconfigure(row_number, weight=1)

        # Update the canvas scrollregion
        self.update_scrollregion()

    def update_row_color(self, check_var, row_number):
        # Update the row color based on checkbox state
        is_checked = check_var.get()
        row_widgets = self.entries[row_number - 1]  # Row index is 0-based in self.entries

        color = self.checked_row_color if is_checked else self.label_bg_color
        for widget in row_widgets:
            if isinstance(widget, tk.Label) or isinstance(widget, tk.Checkbutton):
                widget.config(bg=color)

    def delete_row(self, check_button):
        # Remove the row from the grid and list
        for entry in self.entries:
            if entry[0] == check_button:
                for widget in entry:
                    widget.grid_forget()
                self.entries.remove(entry)
                break

        # Adjust row numbers and positions
        for i, entry in enumerate(self.entries):
            for widget in entry:
                widget.grid(row=i + 1, column=widget.grid_info()['column'], padx=5, pady=5, sticky="nsew")

        # Update the canvas scrollregion
        self.update_scrollregion()

    def update_scrollregion(self, event=None):
        # Update the scrollregion of the canvas to encompass the task_frame
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def on_mouse_wheel(self, event):
        # Scroll the canvas with the mouse wheel
        self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")

    def on_drag_start(self, event):
        # Record the initial position of the mouse
        self.drag_start_x = event.x
        self.drag_start_y = event.y

    def on_drag_motion(self, event):
        # Calculate the new position of the window
        x = self.winfo_x() + event.x - self.drag_start_x
        y = self.winfo_y() + event.y - self.drag_start_y
        self.geometry(f"+{x}+{y}")

if __name__ == "__main__":
    app = TodoListApp()
    app.mainloop()
